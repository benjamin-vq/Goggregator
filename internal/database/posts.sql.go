// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO posts (id, title, url, description, publishedat, feed_id, createdat, updatedat)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type CreatePostParams struct {
	ID          uuid.UUID
	Title       string
	Url         string
	Description sql.NullString
	Publishedat sql.NullTime
	FeedID      uuid.UUID
	Createdat   time.Time
	Updatedat   time.Time
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost,
		arg.ID,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.Publishedat,
		arg.FeedID,
		arg.Createdat,
		arg.Updatedat,
	)
	return err
}

const getPostsByUser = `-- name: GetPostsByUser :many
SELECT posts.id, posts.title, posts.url, posts.description, posts.publishedat, posts.feed_id, posts.createdat, posts.updatedat FROM posts
JOIN feeds f on f.id = posts.feed_id
JOIN users u on f.user_id = u.id
WHERE u.id = $1
ORDER BY publishedat DESC
LIMIT $2
`

type GetPostsByUserParams struct {
	ID    uuid.UUID
	Limit int32
}

func (q *Queries) GetPostsByUser(ctx context.Context, arg GetPostsByUserParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUser, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.Publishedat,
			&i.FeedID,
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
